const path = require( 'path' );const merge = require( 'webpack-merge' );const OptimizeCssAssetsPlugin = require( 'optimize-css-assets-webpack-plugin' );const UglifyJsPlugin = require( 'uglifyjs-webpack-plugin' );const { ReactLoadablePlugin } = require( 'react-loadable/webpack' );const CompressionWebpackPlugin = require('compression-webpack-plugin');const { CleanWebpackPlugin } = require( 'clean-webpack-plugin' );const baseConfig = require( './webpack.config.base' );const utils = require( './utils' );const mode = 'production';let buildConfig = {	output: {		filename: utils.assetsPath( 'js/[name].[contenthash].js' ),		chunkFilename: utils.assetsPath( 'js/[name].[contenthash].js' )	},	devtool: 'cheap-module-eval-source-map',	plugins: [		new CleanWebpackPlugin(),		new CompressionWebpackPlugin( {			filename: '[path].gz[query]',			algorithm: 'gzip',			test: new RegExp( '\\.(js|css)$' ),			threshold: 10240,			minRatio: 0.8		} ),		new ReactLoadablePlugin( {			filename: path.join( __dirname, '../dist/react-loadable.json' ),		} ),	],	optimization: {		concatenateModules: true,		minimizer: [			new OptimizeCssAssetsPlugin( {				assetNameRegExp: /\.css$/g,				cssProcessor: require( 'cssnano' ),				cssProcessorOptions: { safe: true, discardComments: { removeAll: true } },				canPrint: true			} ),			new UglifyJsPlugin( {				// 压缩 js				uglifyOptions: {					ecma: 6,					cache: true,					parallel: true				}			} )		]	}};if ( process.env.npm_config_report ) {	const { BundleAnalyzerPlugin } = require( 'webpack-bundle-analyzer' )	buildConfig.plugins.push( new BundleAnalyzerPlugin() )}module.exports = merge( baseConfig( mode ), buildConfig );