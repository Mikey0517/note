const path = require( 'path' );const MiniCssExtractPlugin = require( 'mini-css-extract-plugin' );const { ReactLoadablePlugin } = require( 'react-loadable/webpack' );const merge = require( 'webpack-merge' );const { CleanWebpackPlugin } = require( 'clean-webpack-plugin' );const baseConfig = require( './webpack.config.base' );const utils = require( './utils' );const mode = 'production';let buildConfig = {	output: {		filename: utils.assetsPath( 'js/[name].[contenthash].js' ),		chunkFilename: utils.assetsPath( 'js/[name].[contenthash].js' )	},	devtool: 'cheap-module-eval-source-map',	module: {		rules: [			{				test: /\.css$/,				exclude: /node_modules/,				include: path.join( __dirname, '../src' ),				use: [					MiniCssExtractPlugin.loader,					{						loader: "css-loader",						options: {							// minimize: true						}					},					{						loader: "postcss-loader",						options: {							config: {								path: "./config/postcss.config.js" // 写到目录即可，文件名强制要求是postcss.config.js							}						}					},				]			},			{				test: /antd.*\.less$/,				exclude: [ /src/ ],				use: [					MiniCssExtractPlugin.loader,					{						loader: "css-loader",						options: {							// minimize: true						}					},					{						loader: "postcss-loader",						options: {							config: {								path: "./config/postcss.config.js" // 写到目录即可，文件名强制要求是postcss.config.js							}						}					},					{						loader: 'less-loader',						options: {							lessOptions: {								javascriptEnabled: true							}						}					},				]			}		]	},	plugins: [		new CleanWebpackPlugin(),		new MiniCssExtractPlugin( {			filename: utils.assetsPath( 'css/[name].[contenthash].css' ),			chunkFilename: utils.assetsPath( 'css/[name].[contenthash].css' ),		} ),		new ReactLoadablePlugin( {			filename: path.join( __dirname, '../dist/react-loadable.json' ),		} ),	],	optimization: {		concatenateModules: true,		minimize: true	}};if ( process.env.npm_config_report ) {	const BundleAnalyzerPlugin = require( 'webpack-bundle-analyzer' ).BundleAnalyzerPlugin	buildConfig.plugins.push( new BundleAnalyzerPlugin() )}module.exports = merge( baseConfig( mode ), buildConfig );