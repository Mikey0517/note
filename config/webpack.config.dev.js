const merge = require( 'webpack-merge' );const baseConfig = require( './webpack.config.base' );const ErrorOverlayPlugin = require( 'error-overlay-webpack-plugin' );const MiniCssExtractPlugin = require('mini-css-extract-plugin');const config = require( './env' );const utils = require( './utils' );const isHMREnabled = config.isHMREnabled();const isCSSModules = config.isCSSModules();const webpackConfig = merge( baseConfig, {	output: {		publicPath: isHMREnabled ? '/' : utils.getPublicPath(),		filename: '[name].js',		chunkFilename: '[name].js',	},	module: {		rules: [			...utils.getAllStyleRelatedLoaders(				true,				isHMREnabled,				isCSSModules,				undefined,				false,				!isHMREnabled,			),		],	},	mode: 'development',	devtool: 'cheap-module-source-map',	stats: { children: false },	plugins: [ new ErrorOverlayPlugin() ],} );if ( !isHMREnabled ) {	webpackConfig.plugins.push(		new MiniCssExtractPlugin( {			// Options similar to the same options in webpackOptions.output			// both options are optional			filename: '[name].css',			chunkFilename: '[id].css',		} ),	);	webpackConfig.optimization = {		namedModules: true,		runtimeChunk: 'single',	};}module.exports = webpackConfig;