import React from "react";import path from "path";import fs from "fs";import { renderToString } from 'react-dom/server';import { StaticRouter } from 'react-router-dom';import Loadable from 'react-loadable';import { getBundles } from 'react-loadable/webpack';import { Helmet } from 'react-helmet';import App from "../src/app";import stats from '../dist/react-loadable.json';const prepHTML = ( data, { html, head, style, body, script } ) => {	data = data.replace( '<html', `<html ${ html }` );	data = data.replace( '</head>', `${ head }${ style }</head>` );	data = data.replace( '<div id=root></div>', `<div id="root">${ body }</div>` );	data = data.replace( '</body>', `${ script }</body>` );	return data;}const render = async ( ctx, next ) => {	const filePath = path.resolve( __dirname, '../dist/index.html' );	ctx.type = 'html';	ctx.body = await new Promise( ( resolve, reject ) => {		fs.readFile( filePath, 'utf-8', ( err, htmlData ) => {			if ( err ) {				console.error( '读取文件错误!', err );				return res.status( 404 ).end()			}			let modules = [];			const helmet = Helmet.renderStatic();			const app = renderToString(				<Loadable.Capture report={ moduleName => modules.push( moduleName ) }>					<StaticRouter context={{}} location={ ctx.path }>						<App/>					</StaticRouter>				</Loadable.Capture>			);			const bundles = getBundles( stats, modules );			const scriptFiles = bundles.filter( bundle => bundle.file.endsWith( '.js' ) );			const styleFiles = bundles.filter( bundle => bundle.file.endsWith( '.css' ) );			const scripts = scriptFiles.map( script => `<script src="/${ script.file }"></script>` ).join( '\n' );			const styles = styleFiles.map( style => `<link href="/${ style.file }" rel="stylesheet"/>` ).join( '\n' );			const html = prepHTML( htmlData, {				html: helmet.htmlAttributes.toString(),				head: helmet.title.toString() + helmet.meta.toString() + helmet.link.toString(),				style: styles,				body: app,				script: scripts,			} )			resolve( html )		} )	} )}export default render;