import { v4 } from 'uuid';let socketIdDictionary = {};let socketInfo = new Map();global.room = new Map();module.exports = wss => {	wss.on( 'connection', ( ws, req ) => {		let socketId = v4();		socketIdDictionary[ socketId ] = ws;		socketInfo.set( ws, getSocketInfo( socketId, req ) );		ws.on( 'message', message => {			console.log( wss.clients )			console.log( 'received: %s', message );		} );		ws.on( 'close', handleClose.bind( this, socketId ) );		Object.keys( socketIdDictionary ).map( id => {			sendOnLineList( id );		} )	} );}const sendOnLineList = socketId => {	let data = [];	for ( let value of socketInfo.values() ) {		value.isUser = value.id === socketId;		data[ value.isUser ? 'unshift' : 'push' ]( value );	}	socketIdDictionary[ socketId ].send( JSON.stringify( {		type: 'onLineIpList',		data	} ) );}const getParam = url => {	let list = url.split( '?' )[ 1 ].split( '&' );	let param = {};	for ( let i = 0; i < list.length; i++ ) {		let item = list[ i ].split( '=' );		param[ item[ 0 ] ] = item[ 1 ];	}	return param;}const getSocketInfo = ( socketId, req ) => {	let ip = req.headers[ 'x-forwarded-for' ] === void 0 ? req.socket.remoteAddress.split( ':' )[ 3 ] : req.headers[ 'x-forwarded-for' ].split( /\s*,\s*/ )[ 0 ];	return {		id: socketId,		ip	};}const handleClose = socketId => {	let ws = socketIdDictionary[ socketId ];	socketInfo.delete( ws );	delete socketIdDictionary[ socketId ];	Object.keys( socketIdDictionary ).map( id => {		sendOnLineList( id );	} )}