import { v4 } from 'uuid';let socketIdDictionary = {};let socketInfo = new Map();let rooms = new Map();module.exports = wss => {	wss.on( 'connection', ( ws, req ) => {		let socketId = v4();		socketIdDictionary[ socketId ] = ws;		socketInfo.set( ws, getSocketInfo( socketId, req ) );		ws.on( 'message', handleDealMassage.bind( this, socketId ) );		ws.on( 'close', handleClose.bind( this, socketId ) );		Object.keys( socketIdDictionary ).map( id => {			sendOnLineList( id );		} )	} );}const sendOnLineList = socketId => {	let data = [];	for ( let value of socketInfo.values() ) {		value.isUser = value.id === socketId;		data[ value.isUser ? 'unshift' : 'push' ]( value );	}	socketIdDictionary[ socketId ].send( JSON.stringify( {		type: 'onLineIpList',		data	} ) );}const getParam = url => {	let list = url.split( '?' )[ 1 ].split( '&' );	let param = {};	for ( let i = 0; i < list.length; i++ ) {		let item = list[ i ].split( '=' );		param[ item[ 0 ] ] = item[ 1 ];	}	return param;}const getSocketInfo = ( socketId, req ) => {	let ip = req.headers[ 'x-forwarded-for' ] === void 0 ? req.socket.remoteAddress.split( ':' )[ 3 ] : req.headers[ 'x-forwarded-for' ].split( /\s*,\s*/ )[ 0 ];	return {		id: socketId,		ip,	};}const handleClose = socketId => {	console.log( `${ socketId }: 退出` )	let ws = socketIdDictionary[ socketId ];	socketInfo.delete( ws );	delete socketIdDictionary[ socketId ];	Object.keys( socketIdDictionary ).map( id => {		sendOnLineList( id );	} )}const handleDealMassage = ( socketId, msg ) => {	const { type, data } = JSON.parse( msg );	if ( type.includes( 'backgammon' ) ) {		dealBackgammonMessage( socketId, JSON.parse( msg ) );	} else if ( type.includes( 'chat' ) ) {		dealChatMessage( socketId, JSON.parse( msg ) );	} else {		switch ( type ) {			case "close":				handleClose( socketId );				break;			case "launch":				handleLaunch( socketId, data );				break;			case "reply":				handleReply( socketId, data );				break;		}	}}/** * 创建对战房间,并发送邀请 * */const handleLaunch = ( socketId, rivalSocketId ) => {	let roomId = v4();	rooms.set( roomId, [ {		socketId,		type: 'rival'	} ] );	// 修改用户是否在房间中状态	editUserRoomStatus( socketId, 1 )	// 给对手发送邀请消息	socketIdDictionary[ rivalSocketId ].send( JSON.stringify( {		type: 'invite',		data: {			roomId,			rivalIp: socketInfo.get( socketIdDictionary[ socketId ] ).ip		}	} ) )}/** * 回复邀请，同意或者拒绝 * */const handleReply = ( socketId, data ) => {	const { type, roomId } = data;	if ( type === 'accept' ) {		// 同意邀请		const room = [].concat( rooms.get( roomId ), [ {			socketId,			type: 'rival'		} ] )		rooms.set( roomId, room );		// 修改用户是否在房间中状态		editUserRoomStatus( socketId, 1 )		for ( let i = 0; i < room.length; i++ ) {			socketIdDictionary[ room[ i ].socketId ].send( JSON.stringify( {				type: 'open-room',				data: {					roomId,					firstMove: socketId !== room[ i ].socketId				}			} ) )		}	} else {		// 拒绝邀请		let room = rooms.get( roomId );		let rivalSocketId = room[ 0 ].socketId;		// 修改用户是否在房间中状态		editUserRoomStatus( rivalSocketId, 1 );		// 向对方发送拒绝消息		socketIdDictionary[ rivalSocketId ].send( JSON.stringify( {			type,		} ) )		// 删除房间		rooms.delete( roomId );	}}/** * 修改用户是否在房间中状态 * */const editUserRoomStatus = ( socketId, status ) => {	let ws = socketIdDictionary[ socketId ];	let info = socketInfo.get( ws );	socketInfo.set( ws, Object.assign( {}, info, { roomStatus: status } ) )}/** * 发送下棋信息 * */const dealBackgammonMessage = ( socketId, data ) => {	switch ( data.type ) {		case "backgammon-point":		case "backgammon-refresh":			sendRoomMessage( socketId, data )	}}/** * 发送聊天信息 * */const dealChatMessage = ( socketId, data ) => {	switch ( data.type ) {		case "chat-msg":			sendRoomMessage( socketId, data )	}}/** * 通用发送房间消息 * */const sendRoomMessage = ( socketId, data ) => {	const { roomId } = data.data;	const room = rooms.get( roomId );	for ( let i = 0; i < room.length; i++ ) {		let rivalSocketId = room[ i ].socketId;		if ( socketId !== rivalSocketId ) {			delete data.data.roomId;			socketIdDictionary[ rivalSocketId ].send( JSON.stringify( data ) )		}	}}