import Koa from 'koa';import Loadable from 'react-loadable';import json from 'koa-json';import staticServer from 'koa-static';import path from "path";import router from './router';import render from "./render";import http from "http";import WebSocket from "ws";import WebSocketApi from "./util/ws";const app = new Koa();const port = 3001;const uri = 'http://localhost:' + port;app.use( json() );app.use( async ( ctx, next ) => {	let start = new Date();	await next();	let ms = new Date() - start;	console.log( '%s %s - %s', ctx.method, ctx.url, ms );} )app.use( async ( ctx, next ) => {  //  如果JWT验证失败，返回验证失败信息	try {		await next();	} catch ( err ) {		if ( err.status === 401 ) {			ctx.status = 401;			ctx.body = {				success: false,				token: null,				info: 'Protected resource, use Authorization header to get access'			}		} else {			throw err		}	}} )router.get( '/', render );app.use( router.routes() );app.use( router.allowedMethods() );app.use( staticServer( path.resolve( 'dist' ) ) );app.use( render );app.on( 'error', ( err ) => {	console.log( 'server error', err );} )const server = http.createServer( app.callback() );const wss = new WebSocket.Server( {	server} );WebSocketApi( wss )console.log( '> Starting prod server...' );Loadable.preloadAll().then( () => {	server.listen( port, () => {		console.log( '> Listening at ' + uri + '\n' )	} )} )